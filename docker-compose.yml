services:
  # ====================
  # BASE DE DATOS POSTGRESQL
  # ====================
  database:
    image: postgres:15-alpine
    container_name: conciliacion_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-conciliacion_db}
      POSTGRES_USER: ${POSTGRES_USER:-conciliacion_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-conciliacion_pass_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    # ports:
    #   - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - conciliacion_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-conciliacion_user} -d ${POSTGRES_DB:-conciliacion_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ====================
  # BACKEND SPRING BOOT
  # ====================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: conciliacion_backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Base de datos
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${POSTGRES_DB:-conciliacion_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-conciliacion_user}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-conciliacion_pass_2024}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      
      # JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "false"
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      
      # Server
      SERVER_PORT: 8082
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost,http://localhost:3000,http://localhost:80,http://frontend}
      
      # Profiles
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production}
      
      # JVM Options
      JAVA_OPTS: ${JAVA_OPTS:--Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom}
    ports:
      - "${BACKEND_PORT:-8082}:8082"
    volumes:
      - backend_logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - conciliacion_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ====================
  # FRONTEND REACT/NGINX
  # ====================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: conciliacion_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ssl/private:/etc/ssl/private:ro
    networks:
      - conciliacion_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# ====================
# VOLUMES PERSISTENTES
# ====================
volumes:
  postgres_data:
    driver: local
    name: conciliacion_postgres_data
  backend_logs:
    driver: local
    name: conciliacion_backend_logs

# ====================
# NETWORK
# ====================
networks:
  conciliacion_network:
    driver: bridge
    name: conciliacion_network